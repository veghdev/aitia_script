# j2-temp #
def debug_out_cdr(src, dst):
    command = [
        str(resolve_path(bin_sgacdrviewer_path, 'SgaCDRViewer-offline.exe')),
        '-l', str(resolve_path(report_path, 'SgaCDRViewer-offline.log')),
        '-u', 'sga', '-p', 'sga', '-r', 'testing',
        '-vr', 'normal', '-cr', '0', '-ct', 'ALL',
        '-o', 'txt',
        '-v', '1', '-d', '1',
        '-f', str(resolve_path(bin_sgacdrviewer_path, 'cdrviewerOffline.CdrFilt')),
        '-out', str(dst),
        '-of', str(src)
    ]
    {%- if flags.app__platforms.cross_platform %}
    startupinfo = None
    if program_platform == 'Windows':
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo)
    {%- else %}
    {%- if config.app.platforms[0].platform == 'Windows' %}
    startupinfo = subprocess.STARTUPINFO()
    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo)
    {%- else %}
    p = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    {%- endif %}
    {%- endif %}
    p.communicate()
# j2-temp #