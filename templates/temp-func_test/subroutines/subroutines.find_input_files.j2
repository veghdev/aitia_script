# j2-temp #
{%- macro add_paths() %}
input_paths.append(input_path)
path_links = resolve_path_links(input_path)
for path_link in path_links:
    if path_link not in input_paths and path_link.exists():
        input_paths.append(path_link)
{%- endmacro %}
{%- macro iterate_files() %}
for input_file in input_path.iterdir():
    if input_file.is_file():
        {%- if in_uris | length > 1 %}
        {%- if in_uris[0].suffix | length > 1 %}
        if input_file.suffix[1:] not in in_uris[0]['suffix']:
        {%- else %}
        if input_file.suffix[1:] != in_uris[0]['suffix']:
        {%- endif %}
        {%- else %}
        {%- if in_uris[0].suffix | length > 1 %}
        if input_file.suffix[1:] not in in_uri['suffix']:
        {%- else %}
        if input_file.suffix[1:] != in_uri['suffix']:
        {%- endif %}
        {%- endif %}
            if input_file.name != '_path_links.cfg':
                logger.debug('   skipped: {} - suffix does not match'.format(os.path.relpath(input_file, program_path.parent)))
            continue
        if args.select is not None:
            matched = False
            for regex in args.select:
                if re.match(r'^{}$'.format(regex), input_file.name):
                    matched = True
                    break
            if not matched:
                logger.debug('   skipped: {} - regular expression ({}) does not match with file name ({})'.format(os.path.relpath(input_file, program_path.parent), args.select, input_file.name))
                continue
        if input_file.stat().st_size == 0:
            logger.debug('   skipped: {} - size is 0'.format(os.path.relpath(input_file, program_path.parent)))
            continue
        input_files.append(input_file)
{%- endmacro %}
# j2-temp #
def find_input_files():
    input_files = list()
    {%- if flags.in.uri__main__searching %}
    input_paths = list()
    {%- if in_uris | length > 1 %}
    input_path = resolve_path(program_path.parent, in_uris[0]['path'] )
    {{- add_paths() | indent(4, True) }}
    {%- else %}
    input_path = resolve_path(program_path.parent, in_uri['path'] )
    {{- add_paths() | indent(4, True) }}
    {%- endif %}

    for input_path in input_paths:
        {{- iterate_files() | indent(8, True) }}
    {%- else %}
    {%- if in_uris | length > 1 %}
    input_path = resolve_path(program_path.parent, in_uris[0]['path'])
    {%- else %}
    input_path = resolve_path(program_path.parent, in_uri['path'])
    {%- endif %}
    {{ iterate_files() | indent(4, True) }}
    {%- endif %}

    return input_files
# j2-temp #