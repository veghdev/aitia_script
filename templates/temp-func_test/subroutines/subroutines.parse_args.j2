# j2-temp #
def parse_args():
    {%- if config.env.name == "" %}
    parser = argparse.ArgumentParser(description='{{ config.app.git_name }} func_test',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    {%- else %}
    parser = argparse.ArgumentParser(description='{{ config.app.git_name }} {{ config.env.name }} func_test',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    {%- endif %}

    parser.add_argument('-rl', '--report_level',
                        help='set report level',
                        choices=['VERBOSE', 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        default='INFO')
    parser.add_argument('-s', '--select',
                        help='select inputs by name using regular expression',
                        nargs='+',
                        default='All')

    parser.add_argument('-e', '--executable',
                        help='change executable name',
                        default='{%- for item in config.app.platforms %}{{ item.executable }}{{- " / " if not loop.last }}{%- endfor %}')
    parser.add_argument('-b', '--bin',
                        help='change relative bin path',
                        default='{% if config.env.name != "" %}../{% endif %}../../vars.cfg or {% if config.env.name != "" %}../{% endif %}../../../vars.cfg')
    {%- if flags.out.cdr__exists %}
    parser.add_argument('-c', '--contrib',
                        help='change relative contrib path',
                        default='{% if config.env.name != "" %}../{% endif %}../../vars.cfg or {% if config.env.name != "" %}../{% endif %}../../../vars.cfg')
    {%- endif %}

    {%- if flags.out.cdr__exists or flags.out.uri__debug %}

    parser.add_argument('--debug_out',
                        help='always create debug files of outputs',
                        action="store_true",
                        default=False)
    {%- endif %}

    {%- if flags.in.uri__main__searching or flags.in.uri__additional__searching %}

    parser.add_argument('--link_out',
                        help='process the found outputs instead of the found references',
                        action="store_true",
                        default=False)
    {%- endif %}

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--clean',
                       help='delete reports and all outputs and exit',
                       action="store_true",
                       default=False)
    group.add_argument('--remove',
                       help='todo - not implemented: delete all or selected inputs, outputs and references and exit',
                       action="store_true",
                       default=False)
    group.add_argument('--replace',
                       help='todo - not implemented: replace all or selected references with previous outputs and exit',
                       action="store_true",
                       default=False)

    args = parser.parse_args()

    if args.select == 'All':
        args.select = None

    {%- if flags.app__platforms.cross_platform %}

    if args.executable == '{%- for item in config.app.platforms %}{{ item.executable }}{{- " / " if not loop.last }}{%- endfor %}':
        args.executable = None
    {%- endif %}

    vars = dict()
    file_path =pathlib.Path.joinpath(program_path.parent, '{% if config.env.name != "" %}../{% endif %}../../vars.cfg')
    if not file_path.exists():
        file_path = pathlib.Path.joinpath(program_path.parent, '{% if config.env.name != "" %}../{% endif %}../../../vars.cfg')
    if file_path.exists():
        try:
            file = open(file_path, 'r')
            line = file.readline()
            while line:
                key, value = line.split(' ', 1)
                if key.strip() == 'bin':
                    vars['bin'] = pathlib.Path.joinpath(program_path.parent, os.path.relpath(file_path.parent, program_path.parent), value.strip())
                {%- if flags.out.cdr__exists %}
                elif key.strip() == 'contrib':
                    vars['contrib'] = pathlib.Path.joinpath(program_path.parent, os.path.relpath(file_path.parent, program_path.parent), value.strip())
                {%- endif %}
                line = file.readline()
        except Exception as e:
            raise Exception(e)
        finally:
            file.close()

    if args.bin == '{% if config.env.name != "" %}../{% endif %}../../vars.cfg or {% if config.env.name != "" %}../{% endif %}../../../vars.cfg':
        args.bin = vars['bin']
    {%- if flags.out.cdr__exists %}
    if args.contrib == '{% if config.env.name != "" %}../{% endif %}../../vars.cfg or {% if config.env.name != "" %}../{% endif %}../../../vars.cfg':
        args.contrib = vars['contrib']
    {%- endif %}

    return args
# j2-temp #