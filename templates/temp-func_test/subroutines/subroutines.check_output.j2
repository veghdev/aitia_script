# j2-temp #
{%- macro validate() %}
{%- if not flags.out.uri__different__validate %}
{%- if flags.out.uri__validate %}
passed = False
{%- else %}
logger.warning('   IGNORE - validation is inactive')
{%- endif %}
{%- else %}
if out_uri['validate']:
    passed = False
else:
    logger.warning('   IGNORE - validation is inactive')
{%- endif %}
{%- endmacro %}
# j2-temp #
def check_output():
    passed = True

    def fcmp(out, ref):
        equals = True
        if ref.exists():
            if filecmp.cmp(out, ref):
                logger.info('   PASSED: {}'.format(os.path.relpath(out, program_path.parent)), foreground_color='light green')
            else:
                equals = False
                logger.error('   FAILED: {} - content does not equal'.format(os.path.relpath(out, program_path.parent)))
        else:
            equals = False
            logger.error('   FAILED: {} - ref does not exist: {}'.format(os.path.relpath(out, program_path.parent), os.path.relpath(ref, program_path.parent)))

        return equals

    {%- if flags.out.cdr__exists %}

    def dcmp(out, ref):
        equals = True
        if out.exists():
            for item in out.iterdir():
                item_out = resolve_path(out, item.name)
                item_ref = resolve_path(ref, item.name)
                if item.is_file():
                    if not fcmp(item_out, item_ref):
                        equals = False
                        if not str(item).endswith('_IMSI.dat') and not str(item).endswith('_MSISDN.dat'):
                            debug_out_cdr(item_out, item_out.with_suffix('.txt'))
                            fcmp(item_out.with_suffix('.txt'), item_ref.with_suffix('.txt'))
                    else:
                        if args.debug_out:
                            if not str(item).endswith('_IMSI.dat') and not str(item).endswith('_MSISDN.dat'):
                                debug_out_cdr(item_out, item_out.with_suffix('.txt'))
                                if not fcmp(item_out.with_suffix('.txt'), item_ref.with_suffix('.txt')):
                                    equals = False
                if item.is_dir():
                    if not dcmp(item_out, item_ref):
                        equals = False

        if ref.exists():
            for item in ref.iterdir():
                item_out = resolve_path(out, item.name)
                item_ref = resolve_path(ref, item.name)
                if item.is_file():
                    if not item_out.exists() and item.suffix[1:] == 'dat':
                        equals = False
                        logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(item_out, program_path.parent)))
                if item.is_dir():
                    if not item_out.exists():
                        if not dcmp(item_out, item_ref):
                            equals = False

        return equals

    # out_cdr
    out = resolve_path(program_path.parent, out_cdr['path'], input_file.stem)
    ref = resolve_path(program_path.parent, '_ref' + out_cdr['path'], input_file.stem)
    if not out.exists() and not ref.exists():
        passed = False
        logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
    else:
        if not dcmp(out, ref):
            passed = False
    {%- else %}

    {%- if flags.out.uri__exists %}
    {%- if out_uris | length > 1%}

    # out_uri
    for out_uri in out_uris:
        out = resolve_path(program_path.parent, out_uri['path'], input_file.stem + '.' + out_uri['suffix'])
        ref = resolve_path(program_path.parent, '_ref' + out_uri['path'], input_file.stem + '.' + out_uri['suffix'])
        if out.exists():
            if not fcmp(out, ref):
                {{- validate() | indent(16, True) }}
            {%- if flags.out.uri__debug %}
                {%- if flags.out.uri__different__debug %}
                if out_uri['debug']:
                    if out.stat().st_size != 0:
                        debug_out(out, out.with_suffix('.yaml'))
                        if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                            {{- validate() | indent(28, True) }}
                {%- else %}
                if out.stat().st_size != 0:
                    debug_out(out, out.with_suffix('.yaml'))
                    if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                        {{- validate() | indent(24, True) }}
                {%- endif %}
            else:
                if args.debug_out:
                    {%- if flags.out.uri__different__debug %}
                    if out_uri['debug']:
                        if out.stat().st_size != 0:
                            debug_out(out, out.with_suffix('.yaml'))
                            if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                                {{- validate() | indent(32, True) }}
                    {%- else %}
                    if out.stat().st_size != 0:
                        debug_out(out, out.with_suffix('.yaml'))
                        if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                            {{- validate() | indent(28, True) }}
                    {%- endif %}
            {%- endif %}
        else:
            {%- if not flags.app_test__processing.missing_test_files %}
            logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
            {{- validate() | indent(12, True) }}
            {%- else %}
            if os.path.relpath(out, program_path.parent).replace('\\', '/') not in missing_test_files:
                logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
                {{- validate() | indent(16, True) }}
            {%- endif %}
    {%- else %}

    # out_uri
    out = resolve_path(program_path.parent, out_uri['path'], input_file.stem + '.' + out_uri['suffix'])
    ref = resolve_path(program_path.parent, '_ref' + out_uri['path'], input_file.stem + '.' + out_uri['suffix'])
    if out.exists():
        if not fcmp(out, ref):
            {{- validate() | indent(12, True) }}
        {%- if flags.out.uri__debug %}
            if out.stat().st_size != 0:
                debug_out(out, out.with_suffix('.yaml'))
                if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                    {{- validate() | indent(20, True) }}
        else:
            if args.debug_out:
                if out.stat().st_size != 0:
                    debug_out(out, out.with_suffix('.yaml'))
                    if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                        {{- validate() | indent(24, True) }}
        {%- endif %}    
    else:
        {%- if not flags.app_test__processing.missing_test_files %}
        logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
        {{- validate() | indent(8, True) }}
        {%- else %}
        if os.path.relpath(out, program_path.parent).replace('\\', '/') not in missing_test_files:
            logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
            {{- validate() | indent(12, True) }}
        {%- endif %}
    {%- endif %}
    {%- endif %}

    {%- if flags.app_test__processing.postprocessing %}

    # out_postprocessing
    for out_postprocessing in out_postprocessings:
        out = resolve_path(program_path.parent, out_postprocessing['path'], input_file.stem + '.' + out_postprocessing['suffix'])
        ref = resolve_path(program_path.parent, '_ref' + out_postprocessing['path'], input_file.stem + '.' + out_postprocessing['suffix'])
        if out.exists():
            if not fcmp(out, ref):
                passed = False
                if out.stat().st_size != 0:
                    debug_out(out, out.with_suffix('.yaml'))
                    if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                        passed = False

            else:
                if args.debug_out:
                    if out.stat().st_size != 0:
                        debug_out(out, out.with_suffix('.yaml'))
                        if not fcmp(out.with_suffix('.yaml'), ref.with_suffix('.yaml')):
                            {{- validate() | indent(28, True) }}
        else:
            logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
            passed = False
    {%- endif %}

    {%- if flags.out.har__exists %}

    # out_har
    out = resolve_path(program_path.parent, out_har['path'], input_file.stem + '.' + out_har['suffix'])
    ref = resolve_path(program_path.parent, '_ref' + out_har['path'], input_file.stem + '.' + out_har['suffix'])
    if out.exists():
        if not fcmp(out, ref):
            passed = False
            # todo debug
    else:
        {%- if not flags.app_test__processing.missing_test_files %}
        passed = False
        logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
        {%- else %}
        if os.path.relpath(out, program_path.parent).replace('\\', '/') not in missing_test_files:
            passed = False
            logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
        {%- endif %}
    {%- endif %}

    {%- if flags.out.geo_csv__exists %}

    # out_geo_csv
    out = resolve_path(program_path.parent, out_geo_csv['path'], input_file.stem + '.' + out_geo_csv['suffix'])
    ref = resolve_path(program_path.parent, '_ref' + out_geo_csv['path'], input_file.stem + '.' + out_geo_csv['suffix'])
    if out.exists():
        if not fcmp(out, ref):
            passed = False
            # todo debug
    else:
        {%- if not flags.app_test__processing.missing_test_files %}
        passed = False
        logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
        {%- else %}
        if os.path.relpath(out, program_path.parent).replace('\\', '/') not in missing_test_files:
            passed = False
            logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
        {%- endif %}
    {%- endif %}

    {%- if flags.out.s1ap_dump__exists %}

    # out_s1ap_dump
    out = resolve_path(program_path.parent, out_s1ap_dump['path'], input_file.stem + '.' + out_s1ap_dump['suffix'])
    ref = resolve_path(program_path.parent, '_ref' + out_s1ap_dump['path'], input_file.stem + '.' + out_s1ap_dump['suffix'])
    if out.exists():
        if not fcmp(out, ref):
            passed = False
    else:
        passed = False
        logger.error('   FAILED: {} - output does not exist'.format(os.path.relpath(out, program_path.parent)))
    {%- endif %}
    {%- endif %}

    if input_file not in results['FAILED']:
        if passed:
            results['PASSED'][input_file] = result
            logger.info('   PASSED', foreground_color='light green')
        else:
            results['FAILED'][input_file] = result
            logger.error('   FAILED')
# j2-temp #